# rasa/core/state.py

from typing import TypedDict, Optional, List, Dict, Any

class State(TypedDict, total=False):
    # The original user input string (e.g., "suggest a weekend getaway" or "optimize my EC2 instances")
    user_input: str

    # User preference data (e.g., genres, cost threshold, travel style) injected by preference agents
    preferences: Dict[str, Any]

    # Session-specific context such as interaction history, timestamps, etc.
    context: Dict[str, Any]

    # Memory recall output — short-term (Redis) and/or long-term (VectorDB) memory content
    memory: Dict[str, Any]

    # Final output generated by the LLM or agent pipeline (e.g., plain text advice, summary, narrative)
    output: Optional[str]

    # Structured output — parsed output with metadata (e.g., list of recommendations, JSON response)
    output_json: Optional[List[Dict[str, Any]]]

    # The full prompt sent to the LLM (for traceability, observability, and debugging)
    prompt: Optional[str]

    # Additional metadata such as tone, domain, persona info, or trace/debug information
    metadata: Dict[str, Any]
